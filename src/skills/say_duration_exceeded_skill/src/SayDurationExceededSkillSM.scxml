<?xml version="1.0" encoding="UTF-8"?>
<scxml xmlns="http://www.w3.org/2005/07/scxml" version="1.0" name="SayDurationExceededSkillAction" datamodel="ecmascript" initial="idle">
    <datamodel>
        <data id="m_name" expr="&apos;SaidExceededFlag&apos;"/>
        <data id="m_value" expr="0"/>
        <data id="m_command" expr="&apos;sayDurationExceeded&apos;"/>
        <data id="m_param" expr="&apos;&apos;"/>
        <data id="m_is_speaking" expr="false"/>
        <data id="m_result" expr="&apos;&apos;"/>
        <data id="SKILL_SUCCESS" expr="0"/>
        <data id="SKILL_FAILURE" expr="1"/>
        <data id="SKILL_RUNNING" expr="2"/>
    </datamodel>
    <!-- Action skill: tick + halt servers -->
    <!-- Clients -->
    <state id="idle">
        <transition target="queryFlag" event="CMD_TICK">
            <send event="BlackboardComponent.GetInt.Call">
                <param name="field_name" expr="m_name"/>
            </send>
        </transition>
        <transition target="halted" event="CMD_HALT"/>
    </state>
    <state id="queryFlag">
        <transition target="checkFlag" event="BlackboardComponent.GetInt.Return">
            <assign location="m_value" expr="_event.data.value"/>
        </transition>
    </state>
    <state id="checkFlag">
        <onentry>
            <if cond="m_value!=0">
                <assign location="m_result" expr="&apos;SUCCESS&apos;"/>
                <else/>
                <assign location="m_result" expr="&apos;SETCMD&apos;"/>
            </if>
        </onentry>
        <transition cond="m_result==&apos;SUCCESS&apos;" target="finalize_success"/>
        <transition cond="m_result==&apos;SETCMD&apos;" target="setCmd"/>
    </state>
    <state id="setCmd">
        <onentry>
            <send event="SchedulerComponent.SetCommand.Call">
                <param name="command" expr="m_command"/>
            </send>
        </onentry>
        <transition target="getText" event="SchedulerComponent.SetCommand.Return">
            <assign location="m_result" expr="_event.data.result"/>
        </transition>
        <transition cond="m_result!=&apos;SUCCESS&apos;" target="failure"/>
    </state>
    <state id="getText">
        <onentry>
            <send event="SchedulerComponent.GetCurrentAction.Call"/>
        </onentry>
        <transition target="talk" event="SchedulerComponent.GetCurrentAction.Return">
            <assign location="m_param" expr="_event.data.param"/>
        </transition>
    </state>
    <state id="talk">
        <onentry>
            <send event="TICK_RESPONSE">
                <param name="status" expr="SKILL_RUNNING"/>
            </send>
            <send event="TextToSpeechComponent.Speak.Call">
                <param name="text" expr="m_param"/>
            </send>
        </onentry>
        <transition target="waitSpeak"/>
    </state>
    <state id="waitSpeak">
        <transition target="checkSpeak" event="CMD_TICK">
            <send event="TextToSpeechComponent.IsSpeaking.Call"/>
        </transition>
        <transition cond="_event.data.result!=&apos;SUCCESS&apos;" target="failure" event="TextToSpeechComponent.Speak.Return"/>
    </state>
    <state id="checkSpeak">
        <transition target="onCheck" event="TextToSpeechComponent.IsSpeaking.Return">
            <assign location="m_is_speaking" expr="_event.data.is_speaking"/>
        </transition>
    </state>
    <state id="onCheck">
        <onentry>
            <if cond="m_is_speaking">
                <assign location="m_result" expr="&apos;RUNNING&apos;"/>
                <else/>
                <assign location="m_result" expr="&apos;SETINT&apos;"/>
            </if>
        </onentry>
        <transition cond="m_result==&apos;RUNNING&apos;" target="finalize_running"/>
        <transition cond="m_result==&apos;SETINT&apos;" target="setInt"/>
    </state>
    <state id="setInt">
        <onentry>
            <send event="BlackboardComponent.SetInt.Call">
                <param name="field_name" expr="m_name"/>
                <param name="value" expr="1"/>
            </send>
        </onentry>
        <transition target="finalize" event="BlackboardComponent.SetInt.Return">
            <assign location="m_result" expr="_event.data.result"/>
        </transition>
    </state>
    <state id="finalize_success">
        <onentry>
            <send event="TICK_RESPONSE">
                <param name="status" expr="SKILL_SUCCESS"/>
            </send>
        </onentry>
        <transition target="idle"/>
    </state>
    <state id="finalize_running">
        <onentry>
            <send event="TICK_RESPONSE">
                <param name="status" expr="SKILL_RUNNING"/>
            </send>
        </onentry>
        <transition target="idle"/>
    </state>
    <state id="finalize">
        <onentry>
            <if cond="m_result==&apos;SUCCESS&apos;">
                <send event="TICK_RESPONSE">
                    <param name="status" expr="SKILL_SUCCESS"/>
                </send>
                <else/>
                <send event="TICK_RESPONSE">
                    <param name="status" expr="SKILL_FAILURE"/>
                </send>
            </if>
        </onentry>
        <transition target="idle"/>
    </state>
    <state id="failure">
        <onentry>
            <send event="TICK_RESPONSE">
                <param name="status" expr="SKILL_FAILURE"/>
            </send>
        </onentry>
        <transition target="idle"/>
    </state>
    <state id="halted">
        <onentry>
            <send event="HALT_RESPONSE"/>
        </onentry>
        <transition target="idle"/>
    </state>
</scxml>
