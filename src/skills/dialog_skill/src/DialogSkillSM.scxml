<scxml 
  initial="idle" 
  version="1.0" 
  name="DialogSkillAction"
  datamodel="ecmascript"
  xmlns="http://www.w3.org/2005/07/scxml">

  <datamodel>
    <data id="STATUS_DONE" expr="'2'"/>
    <data id="m_state"/>
    <data id="m_result"/>
    <data id="m_interaction"/>
    <data id="m_duplicate_index"/>
    <data id="m_reply" expr=""/>
    <data id="m_is_reply_finished" expr="false"/>
    <data id="m_is_beginning_of_conversation" expr="true"/>
    <data id="m_language" expr=""/>
    <data id="m_context" expr=""/>
    <data id="m_is_poi_ended" expr="false"/>
    <data id="m_dance" expr="''"/>
  </datamodel>

  <state id="idle">
      <onentry>
        <log label="State Idle"/>

        <assign expr="true" location="m_is_beginning_of_conversation"/>
        <!-- <script>
          m_is_beginning_of_conversation = 'true';
        </script> -->
      </onentry>
      <transition event="CMD_TICK" target="waitForInteraction">
        <send event="TICK_RESPONSE">
          <param name="result" expr='"RUNNING"'/>
        </send>
        <send event="DialogComponent.WaitForInteraction.Call">
          <param name="is_beginning_of_conversation" expr="m_is_beginning_of_conversation == 'true'"/>
        </send>
      </transition>
      <transition event="CMD_HALT" target="idle">
        <send event="HALT_RESPONSE">
        </send>
      </transition> 
  </state>

  <!-- STATE END -->

  <state id="waitForInteraction">
    <onentry>
      <log label="State waitForInteraction"/>
      <log label="Is beginning of conversation" expr="m_is_beginning_of_conversation"/>
    </onentry>

    <transition event="CMD_HALT" target="stop"/>
    <transition event="CMD_TICK" target="waitForInteraction">
      <send event="TICK_RESPONSE">
        <param name="result" expr='"RUNNING"'/>
      </send>
    </transition>

    <transition event="DialogComponent.WaitForInteraction.Return" target="waitForInteractionResult">
      <assign expr="_event.data.result" location="m_result"/>
      <assign expr="_event.data.interaction" location="m_interaction"/>
    </transition>

  </state>

  <!-- STATE END -->

  <state id="waitForInteractionResult">

    <transition cond="m_result == 'SUCCESS'" target="manageContext">
      <send event="DialogComponent.ManageContext.Call">
      </send>
    </transition>

    <transition cond="m_result == 'FAILURE'" target="sendFailure" />
  </state>

  <!-- STATE END -->

  <state id="manageContext">
    <onentry>
      <log label="State manageContext" expr="m_result"/>
      <log label="Is beginning of conversation" expr="m_is_beginning_of_conversation"/>
    </onentry>
    <transition event="CMD_HALT" target="stop"/>
    <transition event="CMD_TICK" target="manageContext">
      <send event="TICK_RESPONSE">
        <param name="result" expr='"RUNNING"'/>
      </send>
    </transition>

    <transition event="DialogComponent.ManageContext.Return" target="manageContextResult">
      <assign expr="_event.data.result" location="m_result"/>
      <assign expr="_event.data.language" location="m_language"/>
      <assign expr="_event.data.context" location="m_context"/>
      <assign expr="_event.data.isPoIEnded" location="m_is_poi_ended"/>
      <assign expr="_event.data.dance" location="m_dance"/>
    </transition>
  </state>

  <!-- STATE END -->

  <state id="manageContextResult">
    <transition cond="m_result == 'SUCCESS'" target="evaluateContext" />
    <transition cond="m_result == 'FAILURE'" target="sendFailure" />
  </state>

  <!-- STATE END -->

  <state id="evaluateContext">
    <onentry>

      <log label="State evaluateContext" expr="m_result"/>
      <log label="Interaction" expr="m_interaction"/>
      <log label="Language" expr="m_language"/>
      <log label="Is beginning of conversation" expr="m_is_beginning_of_conversation"/> 
      <log label="LLM context" expr="m_context"/>
      <log label="Is tour ended" expr="m_is_poi_ended"/>
      <log label="Dance" expr="m_dance"/>

    </onentry>

    <!-- If the visitor asked to start/continue/end the tour, we send a success response and end the conversation -->
    <transition cond="m_is_poi_ended == true" target="sendSuccess"/>
    <!-- Else, continue the pipeline -->
    <transition cond="m_is_poi_ended == false" target="setLanguage">
        <send event="DialogComponent.SetLanguage.Call">
          <param name="new_language" expr="m_language"/>
        </send>
    </transition>

  </state>

  <!-- STATE END -->

  <state id="setLanguage">
    <onentry>

        <log label="State setLanguage" expr="m_result"/>
        <log label="Interaction" expr="m_interaction"/>
        <log label="Language" expr="m_language"/>
        <log label="Is beginning of conversation" expr="m_is_beginning_of_conversation"/>
        <log label="LLM context" expr="m_context"/>
        <log label="Is tour ended" expr="m_is_poi_ended"/>
        <log label="Dance" expr="m_dance"/>

    </onentry>
    <transition event="CMD_HALT" target="stop"/>
    <transition event="CMD_TICK" target="setLanguage">
      <send event="TICK_RESPONSE">
        <param name="result" expr='"RUNNING"'/>
      </send>
    </transition>
    <transition event="DialogComponent.SetLanguage.Return" target="setLanguageResult">
      <assign expr="_event.data.result" location="m_result"/>
    </transition>
  </state>

  <!-- STATE END -->

  <state id="setLanguageResult">
    <transition cond="m_result == 'SUCCESS'" target="checkDuplicate" >
        <send event="DialogComponent.CheckDuplicate.Call">
          <param name="interaction" expr="m_interaction"/>
          <param name="is_beginning_of_conversation" expr="m_is_beginning_of_conversation == 'true'"/>
          <param name="context" expr="m_context"/>
        </send>
    </transition>
    <transition cond="m_result == 'FAILURE'" target="sendFailure" />
  </state>

  <!-- STATE END -->

  <state id="checkDuplicate">
    <onentry>
        <log label="State checkDuplicate" expr="m_result"/>
        <log label="Interaction" expr="m_interaction"/>
        <log label="Language" expr="m_language"/>
        <log label="Is beginning of conversation" expr="m_is_beginning_of_conversation"/> 
        <log label="LLM context" expr="m_context"/>
        <log label="Is tour ended" expr="m_is_poi_ended"/>
        <log label="Dance" expr="m_dance"/>

        <assign expr="false" location="m_is_beginning_of_conversation"/>
        <!-- <script>
          m_is_beginning_of_conversation = 'false';
        </script> -->

    </onentry>
    <transition event="CMD_HALT" target="stop"/>
    <transition event="CMD_TICK" target="checkDuplicate">
      <send event="TICK_RESPONSE">
        <param name="result" expr='"RUNNING"'/>
      </send>
    </transition>
    <transition event="DialogComponent.CheckDuplicate.Return" target="checkDuplicateResult">
      <assign expr="_event.data.result" location="m_result"/>
      <assign expr="_event.data.duplicateIndex" location="m_duplicate_index"/>
    </transition>
  </state>

  <!-- STATE END -->

  <state id="checkDuplicateResult">
    <transition cond="m_result == 'SUCCESS'" target="evaluateDuplicate" />
    <transition cond="m_result == 'FAILURE'" target="sendFailure" />
  </state>

  <!-- STATE END -->

  <state id="evaluateDuplicate">
    <onentry>

      <log label="State evaluateDuplicate" expr="m_result"/>
      <log label="Interaction" expr="m_interaction"/>
      <log label="Language" expr="m_language"/>
      <log label="Is beginning of conversation" expr="m_is_beginning_of_conversation"/> 
      <log label="Duplicate index" expr="m_duplicate_index"/>
      <log label="LLM context" expr="m_context"/>
      <log label="Is tour ended" expr="m_is_poi_ended"/>
      <log label="Dance" expr="m_dance"/>

    </onentry>
    <!-- <transition cond="m_duplicate_index &gt; 0" target="shortenAndSpeak"/>
    <transition cond="m_duplicate_index &lt; 0" target="interpret"/> -->
    <!-- undesirable solution, but I couldn't make the integer comparison work -->
    <transition cond="m_duplicate_index != '-1'" target="shortenAndSpeak">
        <send event="DialogComponent.ShortenAndSpeak.Call">
          <param name="index" expr="m_duplicate_index"/>
          <param name="context" expr="m_context"/>
          <param name="interaction" expr="m_interaction"/>
        </send>
    </transition>
    <!-- if the context requires a predefined answer, such as for describing something or explaining the function, go in InterpretCommans State -->
    <transition cond="m_context == 'explainFunction' || m_context == 'explainDescription'" target="interpretCommand">
        <send event="DialogComponent.InterpretCommand.Call">
          <param name="context" expr="m_context"/>
        </send>
    </transition>
    <!-- <transition cond="" target="interpretCommand"/> -->
    <transition target="answerAndSpeak">
        <send event="DialogComponent.AnswerAndSpeak.Call">
          <param name="interaction" expr="m_interaction"/>
          <param name="context" expr="m_context"/>
        </send>
    </transition>
    
  </state>

  <!-- STATE END -->
  <!-- TODO: Discuss if adding 2 evaluateDuplicateResult states, to evaluate the correct execution of evaluateDuplicate state -->

  <state id="shortenAndSpeak">
    <onentry>
        <log label="State shortenAndSpeak" expr="m_result"/>
        <log label="Interaction" expr="m_interaction"/>
        <log label="Language" expr="m_language"/>
        <log label="Is beginning of conversation" expr="m_is_beginning_of_conversation"/> 
        <log label="Duplicate index" expr="m_duplicate_index"/>
        <log label="LLM context" expr="m_context"/>
        <log label="Is tour ended" expr="m_is_poi_ended"/>
        <log label="Dance" expr="m_dance"/>
    </onentry>
    <transition event="CMD_HALT" target="stop"/>
    <transition event="CMD_TICK" target="shortenAndSpeak">
      <send event="TICK_RESPONSE">
        <param name="result" expr='"RUNNING"'/>
      </send>
    </transition>
    <transition event="DialogComponent.ShortenAndSpeak.Return" target="shortenAndSpeakResult">
      <assign expr="_event.data.result" location="m_result"/>
      <assign expr="_event.data.reply" location="m_reply"/>
      <assign expr="_event.data.is_reply_finished" location="m_is_reply_finished"/>
    </transition>
  </state>

  <state id="shortenAndSpeakResult">
    <transition cond="m_result == 'SUCCESS'" target="speak" />
    <transition cond="m_result == 'FAILURE'" target="sendFailure" />
  </state>

  <!-- STATE END -->

  <state id="interpretCommand">
    <onentry>

      <log label="State InterpretCommand" expr="m_result"/>
      <log label="Interaction" expr="m_interaction"/>
      <log label="Language" expr="m_language"/>
      <log label="Is beginning of conversation" expr="m_is_beginning_of_conversation"/> 
      <log label="Duplicate index" expr="m_duplicate_index"/>
      <log label="LLM context" expr="m_context"/>
      <log label="Is tour ended" expr="m_is_poi_ended"/>
      <log label="Dance" expr="m_dance"/>

    </onentry>
    <transition event="CMD_HALT" target="stop"/>
    <transition event="CMD_TICK" target="interpretCommand">
      <send event="TICK_RESPONSE">
        <param name="result" expr='"RUNNING"'/>
      </send>
    </transition>
    <transition event="DialogComponent.InterpretCommand.Return" target="interpretCommandResult">
      <assign expr="_event.data.result" location="m_result"/>
      <assign expr="_event.data.reply" location="m_reply"/>
      <assign expr="_event.data.is_reply_finished" location="m_is_reply_finished"/>
    </transition>
  </state>

  <!-- STATE END -->

  <state id="interpretCommandResult">

    <transition cond="m_result == 'SUCCESS'" target="speak" />
    <transition cond="m_result == 'FAILURE'" target="sendFailure" />
  </state>

  <!-- STATE END -->

  <state id="answerAndSpeak">
    <onentry>
      <log label="State answerAndSpeak" expr="m_result"/>
      <log label="Interaction" expr="m_interaction"/>
      <log label="Language" expr="m_language"/>
      <log label="Is beginning of conversation" expr="m_is_beginning_of_conversation"/> 
      <log label="Duplicate index" expr="m_duplicate_index"/>
      <log label="LLM context" expr="m_context"/>
      <log label="Is tour ended" expr="m_is_poi_ended"/>
      <log label="Dance" expr="m_dance"/>
    </onentry>
    <transition event="CMD_HALT" target="stop"/>
    <transition event="CMD_TICK" target="answerAndSpeak">
      <send event="TICK_RESPONSE">
        <param name="result" expr='"RUNNING"'/>
      </send>
    </transition>
    <transition event="DialogComponent.AnswerAndSpeak.Return" target="answerAndSpeakResult">
      <assign expr="_event.data.result" location="m_result"/>
      <assign expr="_event.data.reply" location="m_reply"/>
      <assign expr="_event.data.is_reply_finished" location="m_is_reply_finished"/>
    </transition>
  </state>

  <state id="answerAndSpeakResult">
    <onentry>

    </onentry>
    <transition cond="m_result == 'SUCCESS'" target="speak" />
    <transition cond="m_result == 'FAILURE'" target="sendFailure" />
  </state>

  <state id="speak">
    <onentry>
      <log label="State Speak" expr="m_result"/>
      <log label="Interaction" expr="m_interaction"/>
      <log label="Language" expr="m_language"/>
      <log label="Is beginning of conversation" expr="m_is_beginning_of_conversation"/> 
      <log label="LLM context" expr="m_context"/>
      <log label="Is tour ended" expr="m_is_poi_ended"/>
      <log label="Reply" expr="m_reply"/>
      <log label="Is reply finished" expr="m_is_reply_finished"/>
      <log label="Dance" expr="m_dance"/>

      <send event="DialogComponent.Speak.Call">
        <param name="text" expr="m_reply"/>
        <param name="dance" expr="m_dance"/>
      </send>
    </onentry>
    
    <transition event="DialogComponent.Speak.Return" target="speakResult">
      <assign expr="_event.data.result" location="m_result"/>
    </transition>

  </state>

  <state id="speakResult">

    <transition cond ="m_is_reply_finished == false" target="evaluateDuplicate"/>
    
    <transition cond="m_result == 'SUCCESS'" target="waitForInteraction">
        <send event="DialogComponent.WaitForInteraction.Call">
          <param name="is_beginning_of_conversation" expr="m_is_beginning_of_conversation == 'true'"/>
        </send>
    </transition>
    <transition cond="m_result == 'FAILURE'" target="sendFailure" />
  </state>

  <!-- STATE END -->

  <state id="stop">
    <onentry>
        <send event="DialogComponent.EnableDialog.Call">
          <param name="enable" expr='"false"'/>
        </send>
    </onentry>

    <transition event="DialogComponent.EnableDialog.Return" target="stopResult">
      <assign expr="_event.data.result" location="m_result"/>
    </transition>
  </state>

  <!-- STATE END -->

  <state id="stopResult">

    <transition cond="m_result == 'SUCCESS'" target="sendHalted" />
    <transition cond="m_result == 'FAILURE'" target="stop" />
  </state>

  <!-- STATE END -->

  <state id="sendHalted">
      <onentry>

          <log label="State sendHalted" expr="m_result"/>
          <send event="HALT_RESPONSE">
          </send>

      </onentry>
      <transition target="idle" />
  </state>

  <!-- STATE END -->

  <state id="sendSuccess">
    <transition event="CMD_TICK" target="idle">
      <send event="TICK_RESPONSE">
        <param name="result" expr='"SUCCESS"'/>
      </send>
    </transition>
  </state>

  <!-- STATE END -->

  <state id="sendFailure">
    <transition event="CMD_TICK" target="idle">
      <send event="TICK_RESPONSE">
        <param name="result" expr='"FAILURE"'/>
      </send>
    </transition>
    <!-- <onentry>
      <send event="TICK_RESPONSE">
        <param name="result" expr='"FAILURE"'/>
      </send>

    </onentry>
    <transition target="idle" /> -->
  </state>

</scxml>
