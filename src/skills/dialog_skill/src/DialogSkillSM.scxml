<scxml 
  initial="idle" 
  version="1.0" 
  name="DialogSkillAction"
  datamodel="ecmascript"
  xmlns="http://www.w3.org/2005/07/scxml">

  <datamodel>
    <data id="STATUS_DONE" expr="'2'"/>
    <data id="m_state"/>
    <data id="m_result"/>
    <data id="m_interaction"/>
    <data id="m_duplicate_index"/>
    <data id="m_reply"/>
    <!-- <data id="m_is_question"/> -->
    <data id="m_is_beginning_of_conversation"/>
    <data id="m_language"/>
    <data id="topic"/>
    <data id="m_context"/>
    <data id="m_is_poi_ended"/>
  </datamodel>

  <state id="idle">
      <onentry>
        <log label="State Idle"/>
        <!-- <script>
          topic = eventData().value(QStringLiteral(&quot;topic&quot;)).toString();
          qDebug() &lt;&lt; "entering idle" &lt;&lt; topic;
        </script> -->
        <!-- <assign expr="True" location="m_is_beginning_of_conversation"/> -->
        <script>
          m_is_beginning_of_conversation = 'true';
        </script>
      </onentry>
      <transition event="CMD_TICK" target="waitForInteraction" />
      <transition event="CMD_HALT" target="stop" /> 
  </state>

  <state id="waitForInteraction">
    <onentry>
        <send event="DialogComponent.WaitForInteraction.Call">
          <param name="is_beginning_of_conversation" expr="m_is_beginning_of_conversation == 'true'"/>
        </send>

        <log label="State waitForInteraction"/>
        <log label="Is beginning of conversation" expr="m_is_beginning_of_conversation"/>
        <!-- <script>
          topic = eventData().value(QStringLiteral(&quot;topic&quot;)).toString();
          qDebug() &lt;&lt; "entering waitForInteraction" &lt;&lt; topic;
        </script> -->
    </onentry>
    <transition event="DialogComponent.WaitForInteraction.Return" target="waitForInteractionResult">
      <assign expr="_event.data.result" location="m_result"/>
      <assign expr="_event.data.interaction" location="m_interaction"/>
    </transition>
  </state>

  <state id="waitForInteractionResult">
    <onentry>
      <!-- <script>
        topic = eventData().value(QStringLiteral(&quot;topic&quot;)).toString();
        qDebug() &lt;&lt; "entering waitForInteractionResult" &lt;&lt; topic;
      </script> -->
    </onentry>
    <transition cond="m_result == 'SUCCESS'" target="manageContext" />
    <transition cond="m_result == 'FAILURE'" target="sendFailure" />
  </state>

  <state id="manageContext">
    <onentry>
        <send event="DialogComponent.ManageContext.Call">
        </send>

        <log label="State manageContext" expr="m_result"/>
        <log label="Is beginning of conversation" expr="m_is_beginning_of_conversation"/>
        <!-- <script>
          topic = eventData().value(QStringLiteral(&quot;topic&quot;)).toString();
          qDebug() &lt;&lt; "entering waitForInteraction" &lt;&lt; topic;
        </script> -->
    </onentry>
    <transition event="DialogComponent.ManageContext.Return" target="manageContextResult">
      <assign expr="_event.data.result" location="m_result"/>
      <assign expr="_event.data.language" location="m_language"/>
      <assign expr="_event.data.context" location="m_context"/>
      <assign expr="_event.data.isPoIEnded" location="m_is_poi_ended"/>
    </transition>
  </state>

  <state id="manageContextResult">
    <onentry>
      <!-- <script>
        topic = eventData().value(QStringLiteral(&quot;topic&quot;)).toString();
        qDebug() &lt;&lt; "entering waitForInteractionResult" &lt;&lt; topic;
      </script> -->
    </onentry>
    <transition cond="m_result == 'SUCCESS'" target="evaluateContext" />
    <transition cond="m_result == 'FAILURE'" target="sendFailure" />
  </state>

  <state id="evaluateContext">
    <onentry>

      <log label="State evaluateContext" expr="m_result"/>
      <log label="Interaction" expr="m_interaction"/>
      <log label="Language" expr="m_language"/>
      <log label="Is beginning of conversation" expr="m_is_beginning_of_conversation"/> 
      <log label="LLM context" expr="m_context"/>
      <log label="Is tour ended" expr="m_is_poi_ended"/>

      <!-- <script>
        topic = eventData().value(QStringLiteral(&quot;topic&quot;)).toString();
        qDebug() &lt;&lt; "entering evaluateDuplicate" &lt;&lt; topic;
      </script> -->
    </onentry>

    <!-- If the visitor asked to start/continue/end the tour, we send a success response and end the conversation -->
    <transition cond="m_is_poi_ended == true" target="sendSuccess"/>
    <!-- Else, continue the pipeline -->
    <transition cond="m_is_poi_ended == false" target="setLanguage"/>

  </state>

  <state id="setLanguage">
    <onentry>

        <log label="State setLanguage" expr="m_result"/>
        <log label="Interaction" expr="m_interaction"/>
        <log label="Language" expr="m_language"/>
        <log label="Is beginning of conversation" expr="m_is_beginning_of_conversation"/>
        <log label="LLM context" expr="m_context"/>
        <log label="Is tour ended" expr="m_is_poi_ended"/>

        <send event="DialogComponent.SetLanguage.Call">
          <param name="new_language" expr="m_language"/>
        </send>

        <!-- <script>
          topic = eventData().value(QStringLiteral(&quot;topic&quot;)).toString();
          qDebug() &lt;&lt; "entering setLanguage" &lt;&lt; topic;
        </script> -->
    </onentry>
    <transition event="DialogComponent.SetLanguage.Return" target="setLanguageResult">
      <assign expr="_event.data.result" location="m_result"/>
    </transition>
  </state>

  <state id="setLanguageResult">
    <onentry>
      <!-- <script>
        topic = eventData().value(QStringLiteral(&quot;topic&quot;)).toString();
        qDebug() &lt;&lt; "entering setLanguageResult" &lt;&lt; topic;
      </script> -->
    </onentry>
    <transition cond="m_result == 'SUCCESS'" target="checkDuplicate" />
    <transition cond="m_result == 'FAILURE'" target="sendFailure" />
  </state>


  <state id="checkDuplicate">
    <onentry>
        <log label="State checkDuplicate" expr="m_result"/>
        <log label="Interaction" expr="m_interaction"/>
        <log label="Language" expr="m_language"/>
        <log label="Is beginning of conversation" expr="m_is_beginning_of_conversation"/> 
        <log label="LLM context" expr="m_context"/>
        <log label="Is tour ended" expr="m_is_poi_ended"/>

        <send event="DialogComponent.CheckDuplicate.Call">
          <param name="interaction" expr="m_interaction"/>
          <param name="is_beginning_of_conversation" expr="m_is_beginning_of_conversation == 'true'"/>
          <param name="context" expr="m_context"/>
        </send>
        <!-- <assign expr="False" location="m_is_beginning_of_conversation"/> -->
        <script>
          m_is_beginning_of_conversation = 'false';
        </script>

        <log label="State checkDuplicate" expr="m_result"/>
        <log label="Interaction" expr="m_interaction"/>
        <log label="Language" expr="m_language"/>
        <log label="Is beginning of conversation" expr="m_is_beginning_of_conversation"/> 

        <!-- <script>
          topic = eventData().value(QStringLiteral(&quot;topic&quot;)).toString();
          qDebug() &lt;&lt; "entering checkDuplicate" &lt;&lt; topic;
        </script> -->
    </onentry>
    <transition event="DialogComponent.CheckDuplicate.Return" target="checkDuplicateResult">
      <assign expr="_event.data.result" location="m_result"/>
      <assign expr="_event.data.duplicateIndex" location="m_duplicate_index"/>
    </transition>
  </state>

  <state id="checkDuplicateResult">
    <onentry>
      <!-- <script>
        topic = eventData().value(QStringLiteral(&quot;topic&quot;)).toString();
        qDebug() &lt;&lt; "entering checkDuplicateResult" &lt;&lt; topic;
      </script> -->
    </onentry>
    <transition cond="m_result == 'SUCCESS'" target="evaluateDuplicate" />
    <transition cond="m_result == 'FAILURE'" target="sendFailure" />
  </state>

  <state id="evaluateDuplicate">
    <onentry>

      <log label="State evaluateDuplicate" expr="m_result"/>
      <log label="Interaction" expr="m_interaction"/>
      <log label="Language" expr="m_language"/>
      <log label="Is beginning of conversation" expr="m_is_beginning_of_conversation"/> 
      <log label="Duplicate index" expr="m_duplicate_index"/>
      <log label="LLM context" expr="m_context"/>
      <log label="Is tour ended" expr="m_is_poi_ended"/>

      <!-- <script>
        topic = eventData().value(QStringLiteral(&quot;topic&quot;)).toString();
        qDebug() &lt;&lt; "entering evaluateDuplicate" &lt;&lt; topic;
      </script> -->
    </onentry>
    <!-- <transition cond="m_duplicate_index &gt; 0" target="shortenAndSpeak"/>
    <transition cond="m_duplicate_index &lt; 0" target="interpret"/> -->
    <!-- undesirable solution, but I couldn't make the integer comparison work -->
    <transition cond="m_duplicate_index != '-1'" target="shortenAndSpeak"/>
    <!-- if the context requires a predefined answer, such as for describing something or explaining the function, go in InterpretCommans State -->
    <transition cond="m_context == 'explainFunction'" target="interpretCommand"/>
    <transition cond="m_context == 'explainDescription'" target="interpretCommand"/>
    <transition target="answerAndSpeak"/>
    
  </state>

  <!-- TODO: Discuss if adding 2 evaluateDuplicateResult states, to evaluate the correct execution of evaluateDuplicate state -->

  <state id="shortenAndSpeak">
    <onentry>
        <log label="State shortenAndSpeak" expr="m_result"/>
        <log label="Interaction" expr="m_interaction"/>
        <log label="Language" expr="m_language"/>
        <log label="Is beginning of conversation" expr="m_is_beginning_of_conversation"/> 
        <log label="Duplicate index" expr="m_duplicate_index"/>
        <log label="LLM context" expr="m_context"/>
        <log label="Is tour ended" expr="m_is_poi_ended"/>

        <send event="DialogComponent.ShortenAndSpeak.Call">
          <param name="index" expr="m_duplicate_index"/>
          <param name="context" expr="m_context"/>
          <param name="interaction" expr="m_interaction"/>
        </send>

        <!-- <script>
          topic = eventData().value(QStringLiteral(&quot;topic&quot;)).toString();
          qDebug() &lt;&lt; "entering shortenAndSpeak" &lt;&lt; topic;
        </script> -->
    </onentry>
    <transition event="DialogComponent.ShortenAndSpeak.Return" target="shortenAndSpeakResult">
      <assign expr="_event.data.result" location="m_result"/>
      <!-- <assign expr="_event.data.reply" location="m_reply"/> We can remove the shortened reply since it's consumed within the same function -->
    </transition>
  </state>

  <state id="shortenAndSpeakResult">
    <onentry>

      <!-- <script>
        topic = eventData().value(QStringLiteral(&quot;topic&quot;)).toString();
        qDebug() &lt;&lt; "entering shortenAndSpeakResult" &lt;&lt; topic;
      </script> -->
    </onentry>
    <transition cond="m_result == 'SUCCESS'" target="waitForInteraction" />
    <transition cond="m_result == 'FAILURE'" target="sendFailure" />
  </state>

  <state id="interpretCommand">
    <onentry>
        <send event="DialogComponent.InterpretCommand.Call">
          <param name="context" expr="m_context"/>
        </send>

      <log label="State InterpretCommand" expr="m_result"/>
      <log label="Interaction" expr="m_interaction"/>
      <log label="Language" expr="m_language"/>
      <log label="Is beginning of conversation" expr="m_is_beginning_of_conversation"/> 
      <log label="Duplicate index" expr="m_duplicate_index"/>

    </onentry>
    <transition event="DialogComponent.InterpretCommand.Return" target="interpretCommandResult">
      <assign expr="_event.data.result" location="m_result"/>
      <assign expr="_event.data.isQuestion" location="m_is_question"/>
    </transition>
  </state>

  <state id="interpretCommandResult">
    <onentry>

    </onentry>
    <transition cond="m_result == 'SUCCESS'" target="waitForInteraction" />
    <transition cond="m_result == 'FAILURE'" target="sendFailure" />
  </state>

  <state id="answerAndSpeak">
    <onentry>
        <send event="DialogComponent.AnswerAndSpeak.Call">
          <param name="interaction" expr="m_interaction"/>
          <param name="context" expr="m_context"/>
        </send>

        <!-- <script>
        topic = eventData().value(QStringLiteral(&quot;topic&quot;)).toString();
        qDebug() &lt;&lt; "entering answerAndSpeak" &lt;&lt; topic;
      </script> -->
    </onentry>
    <transition event="DialogComponent.AnswerAndSpeak.Return" target="answerAndSpeakResult">
      <assign expr="_event.data.result" location="m_result"/>
      <!-- <assign expr="_event.data.reply" location="m_reply"/> We can remove the reply since it's consumed within the same function -->
    </transition>
  </state>

  <state id="answerAndSpeakResult">
    <onentry>
      
      <log label="State answerAndSpeak" expr="m_result"/>
      <log label="Interaction" expr="m_interaction"/>
      <log label="Language" expr="m_language"/>
      <log label="Is beginning of conversation" expr="m_is_beginning_of_conversation"/> 
      <log label="Duplicate index" expr="m_duplicate_index"/>
      <log label="LLM context" expr="m_context"/>
      <log label="Is tour ended" expr="m_is_poi_ended"/>

      <!-- <script>
        topic = eventData().value(QStringLiteral(&quot;topic&quot;)).toString();
        qDebug() &lt;&lt; "entering answerAndSpeakResult" &lt;&lt; topic;
      </script> -->
    </onentry>
    <transition cond="m_result == 'SUCCESS'" target="waitForInteraction" />
    <transition cond="m_result == 'FAILURE'" target="sendFailure" />
  </state>

    <state id="stop">
    <onentry>
        <send event="DialogComponent.EnableDialog.Call">
          <param name="enable" expr='"false"'/>
        </send>

        <!-- <script>
          topic = eventData().value(QStringLiteral(&quot;topic&quot;)).toString();
          qDebug() &lt;&lt; "entering stop" &lt;&lt; topic;
        </script> -->
    </onentry>
    <transition event="DialogComponent.EnableDialog.Return" target="stopResult">
      <assign expr="_event.data.result" location="m_result"/>
    </transition>
</state>

<state id="stopResult">
  <onentry>
    <!-- <script>
      topic = eventData().value(QStringLiteral(&quot;topic&quot;)).toString();
      qDebug() &lt;&lt; "entering stopResult" &lt;&lt; topic;
    </script> -->
  </onentry>
  <transition cond="m_result == 'SUCCESS'" target="sendHalted" />
  <transition cond="m_result == 'FAILURE'" target="sendHalted" />
</state>

  <state id="sendSuccess">
    <onentry>
      <send event="TICK_RESPONSE">
        <param name="result" expr='"SUCCESS"'/> 
      </send>

      <!-- <script>
        topic = eventData().value(QStringLiteral(&quot;topic&quot;)).toString();
        qDebug() &lt;&lt; "entering sendSuccess" &lt;&lt; topic;
      </script> -->
    </onentry>
    <transition target="idle" />

  </state>

  <state id="sendHalted">
      <onentry>
          <send event="HALT_RESPONSE">
          </send>

          <!-- <script>
            topic = eventData().value(QStringLiteral(&quot;topic&quot;)).toString();
            qDebug() &lt;&lt; "entering sendHalted" &lt;&lt; topic;
          </script> -->
      </onentry>
      <transition target="idle" />
  </state>

  <state id="sendFailure">
    <onentry>
      <send event="TICK_RESPONSE">
        <param name="result" expr='"FAILURE"'/>
      </send>
      
      <!-- <script>
        topic = eventData().value(QStringLiteral(&quot;topic&quot;)).toString();
        qDebug() &lt;&lt; "entering sendFailure" &lt;&lt; topic;
      </script> -->
    </onentry>
    <transition target="idle" />
  </state>


</scxml>
