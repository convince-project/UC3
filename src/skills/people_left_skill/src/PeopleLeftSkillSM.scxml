<?xml version="1.0" encoding="UTF-8"?>
<scxml xmlns="http://www.w3.org/2005/07/scxml" version="1.0" name="PeopleLeftSkillAction" datamodel="ecmascript" initial="idle">
    <datamodel>
        <data id="m_result" expr="&apos;&apos;"/>
        <data id="SUCCESS_RESULT" expr="&apos;SUCCESS&apos;"/>
        <data id="SKILL_SUCCESS" expr="0"/>
        <data id="SKILL_FAILURE" expr="1"/>
    </datamodel>
    <!-- Clients for resetting tour, counters, and timer -->
    <!-- Action skill: tick + halt servers -->
    <state id="idle">
        <transition target="resetTour" event="CMD_TICK">
            <send event="SchedulerComponent.Reset.Call"/>
        </transition>
        <transition target="halted" event="CMD_HALT"/>
    </state>
    <state id="resetTour">
        <transition target="evaluateReset" event="SchedulerComponent.Reset.Return"/>
    </state>
    <state id="evaluateReset">
        <transition cond="m_result != SUCCESS_RESULT" target="failure"/>
        <transition target="resetCounters"/>
    </state>
    <state id="resetCounters">
        <onentry>
            <send event="TurnBackManagerComponent.ResetCounters.Call"/>
        </onentry>
        <transition target="evaluateCounters" event="TurnBackManagerComponent.ResetCounters.Return"/>
    </state>
    <state id="evaluateCounters">
        <transition cond="m_result != SUCCESS_RESULT" target="failure"/>
        <transition target="stopTimer"/>
    </state>
    <state id="stopTimer">
        <onentry>
            <send event="TimeComponent.StopTourTimer.Call"/>
        </onentry>
        <transition target="evaluateTimer" event="TimeComponent.StopTourTimer.Return"/>
    </state>
    <state id="evaluateTimer">
        <transition cond="m_result != SUCCESS_RESULT" target="failure"/>
        <transition target="stopPoiTimer"/>
    </state>
    <state id="stopPoiTimer">
        <onentry>
            <send event="TimeComponent.StopPoiTimer.Call"/>
        </onentry>
        <transition target="evaluateTimerPoi" event="TimeComponent.StopPoiTimer.Return"/>
    </state>
    <state id="evaluateTimerPoi">
        <transition cond="m_result != SUCCESS_RESULT" target="failure"/>
        <transition target="success"/>
    </state>
    <state id="success">
        <onentry>
            <send event="TICK_RESPONSE">
                <param name="status" expr="SKILL_SUCCESS"/>
                <param name="is_ok" expr="true"/>
            </send>
        </onentry>
        <transition target="idle"/>
    </state>
    <state id="failure">
        <onentry>
            <send event="TICK_RESPONSE">
                <param name="status" expr="SKILL_FAILURE"/>
                <param name="is_ok" expr="true"/>
            </send>
        </onentry>
        <transition target="idle"/>
    </state>
    <state id="halted">
        <onentry>
            <send event="HALT_RESPONSE">
                <param name="is_ok" expr="true"/>
            </send>
        </onentry>
        <transition target="idle"/>
    </state>
</scxml>
