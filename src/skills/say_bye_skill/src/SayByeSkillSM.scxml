<scxml 
  initial="idle" 
  version="1.0" 
  name="SayByeSkillAction"
  datamodel="ecmascript"
  xmlns="http://www.w3.org/2005/07/scxml">

  <datamodel>
    <data id="m_param"/>
    <data id="m_command" expr="'sayBye'"/>
    <data id="m_is_speaking"/>
    <data id="m_result"/>
  </datamodel>

  <state id="idle">
      <transition event="CMD_TICK" target="setCommand" />
      <transition event="CMD_HALT" target="sendHalted" /> 
  </state>

  <state id="setCommand">
    <onentry>
        <send event="SchedulerComponent.SetCommand.Call">
          <param name="command" expr="m_command"/>
        </send>
    </onentry>
    <transition event="SchedulerComponent.SetCommand.Return" target="setCommandResult">
      <assign expr="_event.data.result" location="m_result"/>
  </transition>
</state>

<state id="setCommandResult">
  <transition cond="m_result == 'SUCCESS'" target="getText" />
  <transition cond="m_result == 'FAILURE'" target="sendFailure" />
</state>

<state id="getText">
  <onentry>
      <send event="SchedulerComponent.GetCurrentAction.Call">
      </send>
  </onentry>
  <transition event="SchedulerComponent.GetCurrentAction.Return" target="getTextResult">
    <assign expr="_event.data.result" location="m_result"/>
    <assign expr="_event.data.param" location="m_param"/>
</transition>
</state>

<state id="getTextResult">
  <transition cond="m_result == 'SUCCESS'" target="talk" />
  <transition cond="m_result == 'FAILURE'" target="sendFailure" />
</state>

  <state id="talk">
      <onentry>
        <log expr="m_param"/>
          <send event="TextToSpeechComponent.Speak.Call">
            <param name="text" expr="m_param"/>
          </send>
      </onentry>
      <transition event="TextToSpeechComponent.Speak.Return" target="talkResult">
        <assign expr="_event.data.result" location="m_result"/>
    </transition>
  </state>

  <state id="talkResult">
    <transition cond="m_result == 'SUCCESS'" target="sendRunning" />
    <transition cond="m_result == 'FAILURE'" target="sendFailure" />
  </state>

  <state id="talking">
    <transition event="CMD_TICK" target="isSpeaking" />
    <transition event="CMD_HALT" target="sendHalted" /> 
  </state>

  <state id="isSpeaking">
    <onentry>
        <send event="TextToSpeechComponent.IsSpeaking.Call">
        </send>
    </onentry>
    <transition event="TextToSpeechComponent.IsSpeaking.Return" target="isSpeakingResult">
        <assign expr="_event.data.result" location="m_result"/>
        <assign expr="_event.data.is_speaking" location="m_is_speaking"/>
  </transition>
  </state>

  <state id="isSpeakingResult">
    <transition cond="m_result == 'SUCCESS'" target="checkIfSpeaking" />
    <transition cond="m_result == 'FAILURE'" target="sendFailure" />
  </state>

  <state id="checkIfSpeaking"> 
    <transition cond="m_is_speaking" target="sendRunning" />
    <transition target="sendSuccess"/>
  </state>

  <state id="sendFailure">
    <onentry>
      <send event="TICK_RESPONSE">
        <param name="result" expr='"FAILURE"'/>
      </send>
    </onentry>
    <transition target="idle" />
</state>

<state id="sendSuccess">
    <onentry>
      <send event="TICK_RESPONSE">
        <param name="result" expr='"SUCCESS"'/>
      </send>
    </onentry>
    <transition target="idle" />
</state>

<state id="sendRunning">
  <onentry>
    <send event="TICK_RESPONSE">
      <param name="result" expr='"RUNNING"'/>
    </send>
  </onentry>
  <transition target="talking" />
</state>

  <state id="sendHalted">
      <onentry>
          <send event="HALT_RESPONSE">
          </send>
      </onentry>
      <transition target="idle" />
  </state>


</scxml>
