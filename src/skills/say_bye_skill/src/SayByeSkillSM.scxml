<?xml version="1.0" encoding="UTF-8"?>
<scxml xmlns="http://www.w3.org/2005/07/scxml" version="1.0" name="SayByeSkillAction" datamodel="ecmascript" initial="idle">
    <datamodel>
        <data id="m_command" expr="&apos;sayBye&apos;"/>
        <data id="m_param" expr="&apos;&apos;"/>
        <data id="m_is_speaking" expr="false"/>
        <data id="m_result" expr="&apos;&apos;"/>
        <data id="SUCCESS_RESULT" expr="&apos;SUCCESS&apos;"/>
        <data id="SKILL_SUCCESS" expr="0"/>
        <data id="SKILL_FAILURE" expr="1"/>
        <data id="SKILL_RUNNING" expr="2"/>
    </datamodel>
    <!-- Action skill: tick + halt servers -->
    <!-- Clients -->
    <state id="idle">
        <transition target="setCmd" event="CMD_TICK">
            <send event="SchedulerComponent.SetCommand.Call">
                <param name="command" expr="m_command"/>
            </send>
        </transition>
        <transition target="halted" event="CMD_HALT"/>
    </state>
    <state id="setCmd">
        <transition target="evaluateSetCmd" event="SchedulerComponent.SetCommand.Return">
            <assign location="m_result" expr="_event.data.result"/>
        </transition>
    </state>
    <state id="evaluateSetCmd">
        <transition cond="m_result != SUCCESS_RESULT" target="failure"/>
        <transition target="getText"/>
    </state>
    <state id="getText">
        <onentry>
            <send event="SchedulerComponent.GetCurrentAction.Call"/>
        </onentry>
        <transition target="evaluateGetText" event="SchedulerComponent.GetCurrentAction.Return">
            <assign location="m_param" expr="_event.data.param"/>
            <assign location="m_result" expr="_event.data.result"/>
        </transition>
    </state>
    <state id="evaluateGetText">
        <transition cond="m_result != SUCCESS_RESULT" target="failure"/>
        <transition target="startSpeak"/>
    </state>
    <state id="startSpeak">
        <onentry>
            <send event="TICK_RESPONSE">
                <param name="status" expr="SKILL_RUNNING"/>
                <param name="is_ok" expr="true"/>
            </send>
            <send event="TextToSpeechComponent.Speak.Call">
                <param name="text" expr="m_param"/>
            </send>
        </onentry>
        <transition target="evaluateSpeak" event="TextToSpeechComponent.Speak.Return">
            <assign location="m_result" expr="_event.data.result"/>
        </transition>
    </state>
    <state id="evaluateSpeak">
        <transition cond="m_result != SUCCESS_RESULT" target="failure"/>
        <transition target="waitSpeaking"/>
    </state>
    <state id="waitSpeaking">
        <transition target="checkSpeak" event="CMD_TICK">
            <send event="TextToSpeechComponent.IsSpeaking.Call"/>
        </transition>
        <transition target="halted" event="CMD_HALT"/>
    </state>
    <state id="checkSpeak">
        <transition target="evaluateCheck" event="TextToSpeechComponent.IsSpeaking.Return">
            <assign location="m_is_speaking" expr="_event.data.is_speaking"/>
            <assign location="m_result" expr="_event.data.result"/>
        </transition>
    </state>
    <state id="evaluateCheck">
        <transition cond="m_result != SUCCESS_RESULT" target="failure"/>
        <transition target="decideCheck"/>
    </state>
    <state id="decideCheck">
        <onentry>
            <if cond="m_is_speaking">
                <send event="TICK_RESPONSE">
                    <param name="status" expr="SKILL_RUNNING"/>
                    <param name="is_ok" expr="true"/>
                </send>
                <else/>
                <send event="TICK_RESPONSE">
                    <param name="status" expr="SKILL_SUCCESS"/>
                    <param name="is_ok" expr="true"/>
                </send>
            </if>
        </onentry>
        <transition cond="m_is_speaking" target="waitSpeaking"/>
        <transition target="idle"/>
    </state>
    <state id="failure">
        <onentry>
            <send event="TICK_RESPONSE">
                <param name="status" expr="SKILL_FAILURE"/>
                <param name="is_ok" expr="true"/>
            </send>
        </onentry>
        <transition target="idle"/>
    </state>
    <state id="halted">
        <onentry>
            <send event="HALT_RESPONSE">
                <param name="is_ok" expr="true"/>
            </send>
        </onentry>
        <transition target="idle"/>
    </state>
</scxml>
