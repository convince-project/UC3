<scxml initial="idle" version="1.0" name="NavigationComponent" model_src="" xmlns="http://www.w3.org/2005/07/scxml">

    <ros_action_server name="act_srv" action_name="/NavigationComponent/GoToPoi" type="navigation_interfaces_dummy/GoToPoi" />
    <ros_time_rate name="control_timer_3" rate_hz="10.0" />

    <!--The action thread is a self-contained scxml entry, that will be translated to n. FSMs, depending on n_threads.-->
    <ros_action_thread name="act_srv" n_threads="1" initial="idle">
        <datamodel>
            <data id="GOAL_REACHED" type="int32" expr="4" />
            <data id="ABORTED" type="int32" expr="5" />
            <data id="MOVING" type="int32" expr="2" />
            <data id="IDLE" type="int32" expr="0" />
            <!-- ID of the thread instance -->
            <!-- Goal fields -->
            <data id="goal_id" type="int32" expr="0" />
            <!-- <data id="poi_name" type="string" expr="" /> -->
            <data id="poi_number" type="int32" expr="0" />
            <!-- Exec fields -->
            <data id="status" type="int32" expr="0" />
            <data id="counter" type="int32" expr="0" />
            <data id="counter_max" type="int32" expr="60" />
        </datamodel>

        <state id="idle">
            <onentry>
                <assign location="goal_id" expr="0" />
                <assign location="status" expr="0" />
                <!-- Signal meant to tell the server the thread is now available -->
                <ros_action_thread_free name="act_srv" />
            </onentry>
            <ros_action_handle_thread_start name="act_srv" target="execute">
                <assign location="goal_id" expr="_action.goal_id" />
                <!-- <assign location="poi_name" expr="_goal.poi_name" /> -->
                <assign location="poi_number" expr="_goal.poi_number" />
            </ros_action_handle_thread_start>
        </state>

        <state id="execute">
            <onentry>
                <if cond="counter == counter_max">
                    <assign location="status" expr="GOAL_REACHED" />
                    <assign location="counter" expr="0" />
                <else />
                    <assign location="counter" expr="counter + 1" />
                    <assign location="status" expr="MOVING" />
                </if>
            </onentry>
            <!-- <ros_action_handle_cancel name="act_srv" target="idle" cond="_event.goal_id == goal_id" >
                <assign location="counter" expr="0" />
                <assign location="status" expr="ABORTED" />
            </ros_action_handle_cancel> -->
            <ros_rate_callback name="control_timer_3" target="execute">
                <ros_action_feedback name="act_srv" goal_id="goal_id">
                    <field name="status" expr="status" />
                </ros_action_feedback>
            </ros_rate_callback>
            <transition cond="status == GOAL_REACHED" target="idle">
                <ros_action_succeed name="act_srv" goal_id="goal_id">
                    <field name="is_ok" expr="true" />
                </ros_action_succeed>
            </transition>
            <!-- <transition target="execute">
                <ros_action_feedback name="act_srv" goal_id="goal_id">
                    <field name="status" expr="status" />
                </ros_action_feedback>
            </transition> -->
        </state>
    </ros_action_thread>

    <datamodel>
        <!-- Goal fields -->
        <data id="goal_id" type="int32" expr="0" />
        <!-- <data id="poi_name" type="string" expr="" /> -->
        <data id="poi_number" type="int32" expr="0" />
        <!-- Keep track of which thread is in use -->
        <data id="thread_0_busy" type="bool" expr="false" />
        <data id="thread_to_start" type="int32" expr="-1" />
        <data id="thread_to_stop" type="int32" expr="-1" />
    </datamodel>

    <state id="idle">
        <ros_action_handle_goal name="act_srv" target="check_goal">
            <assign location="goal_id" expr="_action.goal_id" />
            <!-- <assign location="poi_name" expr="_goal.poi_name" /> -->
            <assign location="poi_number" expr="_goal.poi_number" />
        </ros_action_handle_goal>
        <!-- <ros_action_handle_cancel name="act_srv" target="cancel_goal"> 
            <assign location="goal_id" expr="_action.goal_id" />
        </ros_action_handle_cancel> -->
        <ros_action_handle_thread_free name="act_srv" target="idle"> 
            <if cond="_event.thread_id == 0">
                <assign location="thread_0_busy" expr="false" />
            </if>
        </ros_action_handle_thread_free>
    </state>

    <state id="check_goal">
        <onentry>
            <if cond="thread_0_busy == false">
                <assign location="thread_0_busy" expr="true" />
                <assign location="thread_to_start" expr="0" />
            <else />
                <assign location="thread_to_start" expr="-1" />
            </if>
        </onentry>
        <transition target="idle">
            <if cond="thread_to_start >= 0">
                <ros_action_accept_goal name="act_srv" goal_id="goal_id" /> 
                <!-- The thread ID is appended as an additional param in the send event.
                It will be handled on the thread side -->
                <ros_action_start_thread name="act_srv" thread_id="thread_to_start" goal_id="goal_id"> 
                    <!-- <field name="poi_name" expr="poi_name" /> -->
                    <field name="poi_number" expr="poi_number" />
                </ros_action_start_thread>
            <else />
                <ros_action_reject_goal name="act_srv" goal_id="goal_id" />
            </if>
        </transition>
    </state>

    <!-- <state id="cancel_goal">
        <onentry>
            <if cond="thread_0_busy == false">
                <assign location="thread_0_busy" expr="true" />
                <assign location="thread_to_stop" expr="-1" />
            <else />
                <assign location="thread_to_stop" expr="0" />
            </if>
        </onentry>
        <transition target="idle">
            <if cond="thread_to_stop >= 0">
                <ros_action_cancel_goal name="act_srv" goal_id="goal_id" />
                <ros_action_stop_thread name="act_srv" thread_id="thread_to_stop" goal_id="goal_id">
                </ros_action_stop_thread>
            <else />
                <ros_action_reject_goal name="act_srv" goal_id="goal_id" />
            </if>
        </transition>
    </state> -->

</scxml>
