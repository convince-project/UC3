<?xml version="1.0" encoding="UTF-8"?>
<scxml xmlns="http://www.w3.org/2005/07/scxml" 
       xmlns:xi="http://www.w3.org/2001/XInclude"
       version="1.0" 
       initial="idle">

  <datamodel>
    <!-- Store dance-related data -->
    <data id="dance_name" expr="''"/>
    <data id="is_dancing" expr="false"/>
    <data id="ctp_service_parts" type="array" expr="[]"/> 
  </datamodel>

  <!-- Main service servers -->
  <ros_service_server service_name="/ExecuteDanceComponent/ExecuteDance" type="execute_dance_interfaces/ExecuteDance"/>
  <ros_service_server service_name="/ExecuteDanceComponent/IsDancing" type="execute_dance_interfaces/IsDancing"/>

  <!-- Main state machine -->
  <state id="idle">
    <!-- Handle incoming service requests -->
    <ros_service_handle_request name="/ExecuteDanceComponent/ExecuteDance" target="handleExecuteDanceRequest"/>
    <ros_service_handle_request name="/ExecuteDanceComponent/IsDancing" target="handleIsDancingRequest"/>

    <!-- Initialize on startup -->
    <onentry>
      <ros_service_send_request name="/DanceComponent/GetPartNames"/>
    </onentry>
    
    <!-- Process service response -->
    <ros_service_handle_response name="/DanceComponent/GetPartNames" target="processParts"/>
  </state>

  <!-- Process the robot parts available for movement -->
  <state id="processParts">
    <onentry>
      <assign location="ctp_service_parts" expr="_res.parts"/>
    </onentry>
    <transition target="idle"/>
  </state>

  <!-- Handle ExecuteDance service request -->
  <state id="handleExecuteDanceRequest">
    <onentry>
      <!-- Store dance name -->
      <assign location="dance_name" expr="_req.dance_name"/>
      
      <!-- Call SetDance service -->
      <ros_service_send_request name="/DanceComponent/SetDance">
        <field name="dance" expr="dance_name"/>
      </ros_service_send_request>
    </onentry>
    
    <!-- Process SetDance response -->
    <ros_service_handle_response name="/DanceComponent/SetDance" target="processSetDanceResponse"/>
  </state>

  <!-- Process SetDance response -->
  <state id="processSetDanceResponse">
    <onentry>
      <if cond="_res.is_ok">
        <!-- Start the dance execution task -->
        <transition target="startDanceExecution"/>
      <else/>
        <!-- Send failure response -->
        <ros_service_send_response name="/ExecuteDanceComponent/ExecuteDance">
          <field name="is_ok" expr="false"/>
          <field name="error_msg" expr="'Dance not found'"/>
        </ros_service_send_response>
        <transition target="idle"/>
      </if>
    </onentry>
  </state>

  <!-- Start the dance execution -->
  <state id="startDanceExecution">
    <onentry>
      <!-- Send success response -->
      <ros_service_send_response name="/ExecuteDanceComponent/ExecuteDance">
        <field name="is_ok" expr="true"/>
      </ros_service_send_response>
      
      <!-- Get dance duration -->
      <ros_service_send_request name="/DanceComponent/GetDanceDuration"/>
    </onentry>
    
    <ros_service_handle_response name="/DanceComponent/GetDanceDuration" target="processDanceDuration"/>
  </state>

  <!-- Process dance duration response -->
  <state id="processDanceDuration">
    <onentry>
      <if cond="_res.is_ok">
        <!-- Set dancing status and start timer -->
        <assign location="is_dancing" expr="true"/>
        
        <!-- Start the movement execution loop -->
        <transition target="getNextMovement"/>
        
        <!-- Set up timer to track dance duration -->
        <send event="dance_complete" delay="{_res.duration}s"/>
      <else/>
        <log label="ExecuteDanceComponent" expr="'Dance duration not found'"/>
        <transition target="idle"/>
      </if>
    </onentry>
  </state>

  <!-- Get the next movement from DanceComponent -->
  <state id="getNextMovement">
    <onentry>
      <ros_service_send_request name="/DanceComponent/GetMovement"/>
    </onentry>
    
    <ros_service_handle_response name="/DanceComponent/GetMovement" target="processMovement"/>
  </state>

  <!-- Process movement data -->
  <state id="processMovement">
    <onentry>
      <if cond="_res.is_ok">
        <!-- Send movement to robot -->
        <if cond="dance_name == 'idleMove' || dance_name == 'navigationPosition'">
          <!-- Send immediate movement -->
          <log label="ExecuteDanceComponent" expr="'Sending immediate movement to ' + _res.part_name"/>
        <else/>
          <!-- Queue movement -->
          <log label="ExecuteDanceComponent" expr="'Queueing movement for ' + _res.part_name"/>
        </if>
        
        <!-- Update movement state -->
        <ros_service_send_request name="/DanceComponent/UpdateMovement"/>
      <else/>
        <log label="ExecuteDanceComponent" expr="'Movement not found, skipping...'"/>
        <ros_service_send_request name="/DanceComponent/UpdateMovement"/>
      </if>
    </onentry>
    
    <ros_service_handle_response name="/DanceComponent/UpdateMovement" target="processUpdateMovement"/>
  </state>

  <!-- Process update movement response -->
  <state id="processUpdateMovement">
    <onentry>
      <if cond="_res.done_with_dance">
        <log label="ExecuteDanceComponent" expr="'Done getting Dance'"/>
        <transition target="idle"/>
      <else/>
        <!-- Continue with next movement -->
        <transition target="getNextMovement"/>
      </if>
    </onentry>
  </state>

  <!-- Handle IsDancing service request -->
  <state id="handleIsDancingRequest">
    <onentry>
      <ros_service_send_response name="/ExecuteDanceComponent/IsDancing">
        <field name="is_dancing" expr="is_dancing"/>
        <field name="is_ok" expr="true"/>
      </ros_service_send_response>
      <transition target="idle"/>
    </onentry>
  </state>

  <!-- Handle dance complete event -->
  <transition event="dance_complete" target="idle">
    <assign location="is_dancing" expr="false"/>
    <log label="ExecuteDanceComponent" expr="'Dance completed'"/>
  </transition>

</scxml>