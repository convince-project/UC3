<?xml version="1.0" encoding="UTF-8"?>
<scxml
  xmlns="http://www.w3.org/2005/07/scxml"
  version="1.0"
  name="SayDurationExceededSkill"
  datamodel="ecmascript"
  initial="idle">

  <datamodel>
    <data id="m_name"         type="string"  expr="'SaidExceededFlag'"/>
    <data id="m_value"        type="int32"   expr="0"/>
    <data id="m_command"      type="string"  expr="'sayDurationExceeded'"/>
    <data id="m_param"        type="string"  expr="''"/>
    <data id="m_is_speaking"  type="boolean" expr="false"/>
    <data id="m_result"       type="string"  expr="''"/>
    <data id="SUCCESS_RESULT" type="string"  expr="'SUCCESS'"/>
    <data id="SKILL_SUCCESS"  type="int8"    expr="0"/>
    <data id="SKILL_FAILURE"  type="int8"    expr="1"/>
    <data id="SKILL_RUNNING"  type="int8"    expr="2"/>
  </datamodel>

  <!-- Action skill: tick + halt servers -->
  <ros_service_server service_name="/SayDurationExceededSkill/tick" type="bt_interfaces_dummy/TickAction"/>
  <ros_service_server service_name="/SayDurationExceededSkill/halt" type="bt_interfaces_dummy/HaltAction"/>

  <!-- Clients -->
  <ros_service_client service_name="/BlackboardComponent/GetInt" type="blackboard_interfaces/GetIntBlackboard"/>
  <ros_service_client service_name="/SchedulerComponent/SetCommand" type="scheduler_interfaces/SetCommand"/>
  <ros_service_client service_name="/SchedulerComponent/GetCurrentAction" type="scheduler_interfaces/GetCurrentAction"/>
  <ros_service_client service_name="/TextToSpeechComponent/Speak" type="text_to_speech_interfaces/Speak"/>
  <ros_service_client service_name="/BlackboardComponent/SetInt" type="blackboard_interfaces/SetIntBlackboard"/>
  <ros_service_client service_name="/TextToSpeechComponent/IsSpeaking" type="text_to_speech_interfaces/IsSpeaking"/>

  <state id="idle">
    <ros_service_handle_request name="/SayDurationExceededSkill/tick" target="queryFlag">
      <ros_service_send_request name="/BlackboardComponent/GetInt">
        <field name="field_name" expr="m_name"/>
      </ros_service_send_request>
    </ros_service_handle_request>
    <ros_service_handle_request name="/SayDurationExceededSkill/halt" target="halted"/>
  </state>

  <state id="queryFlag">
    <ros_service_handle_response name="/BlackboardComponent/GetInt" target="evaluateQuery">
      <assign location="m_value"  expr="_res.value"/>
      <assign location="m_result" expr="_res.result"/>
    </ros_service_handle_response>
  </state>

  <state id="evaluateQuery">
    <transition cond="m_result != SUCCESS_RESULT" target="failure"/>
    <transition target="checkFlag"/>
  </state>

  <state id="checkFlag">
    <transition cond="m_value != 0" target="success"/>
    <transition target="setCmd"/>
  </state>

  <state id="setCmd">
    <onentry>
      <ros_service_send_request name="/SchedulerComponent/SetCommand">
        <field name="command" expr="m_command"/>
      </ros_service_send_request>
    </onentry>
    <ros_service_handle_response name="/SchedulerComponent/SetCommand" target="evaluateSetCmd">
      <assign location="m_result" expr="_res.result"/>
    </ros_service_handle_response>
  </state>

  <state id="evaluateSetCmd">
    <transition cond="m_result != SUCCESS_RESULT" target="failure"/>
    <transition target="getText"/>
  </state>

  <state id="getText">
    <onentry>
      <ros_service_send_request name="/SchedulerComponent/GetCurrentAction"/>
    </onentry>
    <ros_service_handle_response name="/SchedulerComponent/GetCurrentAction" target="evaluateGetText">
      <assign location="m_param"  expr="_res.param"/>
      <assign location="m_result" expr="_res.result"/>
    </ros_service_handle_response>
  </state>

  <state id="evaluateGetText">
    <transition cond="m_result != SUCCESS_RESULT" target="failure"/>
    <transition target="startSpeak"/>
  </state>

  <state id="startSpeak">
    <onentry>
      <ros_service_send_response name="/SayDurationExceededSkill/tick">
        <field name="status" expr="SKILL_RUNNING"/>
        <field name="is_ok" expr="true"/>
      </ros_service_send_response>
      <ros_service_send_request name="/TextToSpeechComponent/Speak">
        <field name="text" expr="m_param"/>
      </ros_service_send_request>
    </onentry>
    <ros_service_handle_response name="/TextToSpeechComponent/Speak" target="evaluateSpeak">
      <assign location="m_result" expr="_res.result"/>
    </ros_service_handle_response>
  </state>

  <state id="evaluateSpeak">
    <transition cond="m_result != SUCCESS_RESULT" target="failure"/>
    <transition target="waitSpeak"/>
  </state>

  <state id="waitSpeak">
    <ros_service_handle_request name="/SayDurationExceededSkill/tick" target="checkSpeak">
      <ros_service_send_request name="/TextToSpeechComponent/IsSpeaking"/>
    </ros_service_handle_request>
    <ros_service_handle_request name="/SayDurationExceededSkill/halt" target="halted"/>
  </state>

  <state id="checkSpeak">
    <ros_service_handle_response name="/TextToSpeechComponent/IsSpeaking" target="evaluateCheck">
      <assign location="m_is_speaking" expr="_res.is_speaking"/>
      <assign location="m_result"      expr="_res.result"/>
    </ros_service_handle_response>
  </state>

  <state id="evaluateCheck">
    <transition cond="m_result != SUCCESS_RESULT" target="failure"/>
    <transition target="decideCheck"/>
  </state>

  <state id="decideCheck">
    <transition cond="m_is_speaking" target="running"/>
    <transition target="setFlag"/>
  </state>

  <state id="running">
    <onentry>
      <ros_service_send_response name="/SayDurationExceededSkill/tick">
        <field name="status" expr="SKILL_RUNNING"/>
        <field name="is_ok" expr="true"/>
      </ros_service_send_response>
    </onentry>
    <transition target="waitSpeak"/>
  </state>

  <state id="setFlag">
    <onentry>
      <ros_service_send_request name="/BlackboardComponent/SetInt">
        <field name="field_name" expr="m_name"/>
        <field name="value" expr="1"/>
      </ros_service_send_request>
    </onentry>
    <ros_service_handle_response name="/BlackboardComponent/SetInt" target="evaluateSetFlag">
      <assign location="m_result" expr="_res.result"/>
    </ros_service_handle_response>
  </state>

  <state id="evaluateSetFlag">
    <transition cond="m_result != SUCCESS_RESULT" target="failure"/>
    <transition target="success"/>
  </state>

  <state id="success">
    <onentry>
      <ros_service_send_response name="/SayDurationExceededSkill/tick">
        <field name="status" expr="SKILL_SUCCESS"/>
        <field name="is_ok" expr="true"/>
      </ros_service_send_response>
    </onentry>
    <transition target="idle"/>
  </state>

  <state id="failure">
    <onentry>
      <ros_service_send_response name="/SayDurationExceededSkill/tick">
        <field name="status" expr="SKILL_FAILURE"/>
        <field name="is_ok" expr="true"/>
      </ros_service_send_response>
    </onentry>
    <transition target="idle"/>
  </state>

  <state id="halted">
    <onentry>
      <ros_service_send_response name="/SayDurationExceededSkill/halt">
        <field name="is_ok" expr="true"/>
      </ros_service_send_response>
    </onentry>
    <transition target="idle"/>
  </state>

</scxml>
